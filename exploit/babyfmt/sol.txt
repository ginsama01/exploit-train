lucky - offset: 00000000006010cc
-> Dung objdump -t fmt1 de xem offset

Xem offbet cua buffer khi goi printf: thu in %x %x ... xem offset thu bao nhieu la ma ascii cua %x
-> offset thu 16
%n takes a pointer to a signed int, where the number of characters written so far is stored. Because we can control certain aspects of the stack (as the buffer is on the stack) we can tell it where to write the data. As we can control the input, we can tell it how much. This gives us an arbitrary write. If we want to write 20 bytes somewhere, we input 20 characters and then call %n. We can even use other fancy format string specifiers to shorten it enough,

echo -e "\xcc\x10`\x00\x00\x00\x00\x00%16$n\n8\n"



64 bit:
Linux : RDI, RSI, RDX, RCX, R8, R9, còn lại từ ngăn xếp

Windows : RCX, RDX, RSI, RDI, còn lại từ ngăn xếp

The first x is short for "examine." This command allows us to examine memory, so the name is fitting. The /32 specifies that we want to examine the next 32 four-byte segments. The final x at the very end tells GDB that we want to view this section of memory in hexadecimal format. The last term, $esp, tells the command to start looking at memory at the very beginning of the current stack frame. Let's see what output we get from this command: